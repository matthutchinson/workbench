#!/usr/bin/env zsh

################################################################################
# Configure fzf - https://github.com/junegunn/fzf
################################################################################

export FZF_DEFAULT_OPTS='--height 40% --reverse'   # set style
export FZF_DEFAULT_COMMAND="rg -l --color never --files ." # use rg

# auto-completion
[ -d /usr/local/opt/fzf ] && [[ $- == *i* ]] && source "/usr/local/opt/fzf/shell/completion.zsh" 2> /dev/null
[ -d /opt/homebrew/opt/fzf ] && [[ $- == *i* ]] && source "/opt/homebrew/opt/fzf/shell/completion.zsh" 2> /dev/null

# key bindings
[ -d /usr/local/opt/fzf ] && source "/usr/local/opt/fzf/shell/key-bindings.zsh"
[ -d /opt/homebrew/opt/fzf ] && source "/opt/homebrew/opt/fzf/shell/key-bindings.zsh"

# helper function
function _echo_and_execute {
  echo $1
  eval $1
}

################################################################################
# Files
################################################################################

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fe {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

################################################################################
# Tmux
################################################################################

# fzf select a pane to jump to
function tj {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

################################################################################
# PIDs
################################################################################

function _fzf_pid {
  echo -n $(ps axww -o pid,user,%cpu,%mem,start,time,command | fzf | sed 's/^ *//' | cut -f1 -d' ')
}

# copy PID to clipboard
function pid {
  echo -n "$(_fzf_pid)" | pbcopy
}

# kill a process
function pkill {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

################################################################################
# Git
################################################################################

function _fzf_git_branch {
  # fzf a local branch, trim leading whitespace, and "*"
  echo $(git branch --verbose | sed 's/^. //' | fzf | sed 's/ .*$//' | xargs echo)
}

# choose branch and pass as last arg to a command, or copy branch name
# if there are no arguments (git branch pick, gbp)
function gbp {
  local branch=$(_fzf_git_branch)
  if [[ ($# -eq 0) && (! -z $branch) ]]; then
    echo -n $branch | pbcopy; return;
  fi
  _echo_and_execute "$* $branch"
}

# fzf a branch to checkout
alias gbc="gbp git checkout"

# fzf a local branch to delete
function gbd {
  local branch=$(_fzf_git_branch)

  if [[ ($# -eq 0) && (! -z $branch) ]]; then
    _echo_and_execute "git branch -D $branch"
    if [[ ($? -ne 0) && ($branch != 'main') ]]; then
      # deleting current branch, explain you can't and checkout main
      echo "⚠️". "you are already on this branch, checking out main"
      git checkout main
    fi
    return
  fi
}

# fzf a branch to delete (also deletes remote in a fork)
function gbdd {
  local branch=$(_fzf_git_branch)
  if [[ ($# -eq 0) && (! -z $branch) ]]; then
    _echo_and_execute "git branch -D $branch"
    if [ $? -eq 0 ]; then
      # checking for remote br in silent fork, will be deleted if it exists
      ((
        local remote_exists=$(git fetch origin;git branch -r | grep $branch)
        if [[ ($# -eq 0) && (! -z $remote_exists) ]]; then
          echo "found a remote branch, deleting it too ..."
          _echo_and_execute "git push origin :$branch"
        fi
      )&) 2>/dev/null
    elif [ $branch != 'main' ]; then
      # deleting current branch, not allowed
      echo "⚠️". "you are already on this branch, checking out main"
      git checkout main
    fi
    return
  fi
}

# git look - fzf commit browser, shows preview on enter
function glook {
  git log $1 --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index \
      --header "enter to view, ctrl+s to toggle sort" \
      --bind "ctrl-s:toggle-sort" \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {} FZF-EOF"
}

# git look (see above) with this branch compared to main (unless br is main)
function glm {
  if [[ $BR == 'main' ]]; then
    glook
  else
    glook "main..$BR"
  fi
}

################################################################################
# Rails migrations
################################################################################

function _fzf_rails_migration {
  # pass migration number from chosen file as VERSION argumentto cmd
  echo $(ls ./db/migrate/ | fzf --preview 'head -20 ./db/migrate/{}' | xargs | cut -d '_' -f 1 | xargs | tr -d '\n')
}

function rdbm {
  if [ ! -d "./db/migrate" ]; then
    echo "Oops, you are not in a Rails directory"
  else
    if [ $# -eq 0 ]; then
     _echo_and_execute "bundle exec rake db:migrate"
    else
      local migrate_version=$(_fzf_rails_migration)
      if [ ! -z $migrate_version ]; then
        _echo_and_execute "$*$migrate_version"
      fi
    fi
  fi
}

alias rdbmu="rdbm bundle exec rake db:migrate:up VERSION="
alias rdbmd="rdbm bundle exec rake db:migrate:down VERSION="
alias rdbmr="rdbm bundle exec rake db:migrate:redo VERSION="
